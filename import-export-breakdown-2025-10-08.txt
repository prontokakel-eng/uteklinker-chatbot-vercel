# Import/Export Breakdown â€“ ChatBot Logic Layer
# Generated: 2025-10-08

## ðŸ”¹ detect-lang-core.js
**Imports:**
- getOpenAIClient from `./openai-client.js`
- detectLangRulesOnly from `./detect-lang-rules.js`
- detectLangHeuristicGroup from `./detect-lang-heuristics.js`
- detectLangFaqFuzzy from `./faq-fuzzy-detect.js`
- initFaqData from `./faq-data.js`
- logMessage from `./logger.js`
- getFaqCache from `./faq-cache.js`

**Exports:**
- `detectLangCore(input, opts)` â€“ huvudpipeline fÃ¶r sprÃ¥kdetektion.

**Internal vars:**
- `faqReady` (bool)
- `mapConfidence(via, lang)` â€“ internal helper
- `cleanInput`, `normalizedInput`
- `ruleRes`, `regexRes`, `heurRes`, `groupRes`

**Flow:**
Regex â†’ Heuristik â†’ SE-fallback â†’ Gruppanalys â†’ IP â†’ AI

---

## ðŸ”¹ detect-lang-rules.js
**Imports:**
- logMessage from `./logger.js`

**Exports:**
- `detectLangRulesOnly(text)`

**Internal structures:**
- `regexAnchors`, `boosters`, `exclusiveRegex`, `confidenceRules`
- `neutralizeBrandTerms(text)` helper

**Responsibilities:**
Lexikonbaserad regexâ€‘analys och normalisering med sprÃ¥kbevarande diakriter.

---

## ðŸ”¹ detect-lang-heuristics.js
**Exports:**
- `detectLangHeuristicGroup(input)`

**Internal logic:**
- `scores` object (SE, DA, DE, EN)
- regex-matcher fÃ¶r diakriter `[Ã¥Ã¤Ã¶Ã¦Ã¸Ã¼ÃŸ]`
- ordlistor per sprÃ¥k (`seWords`, `daWords`, `deWords`, `enWords`)
- korttextâ€‘boost (â‰¤3 ord)

**Purpose:**
Ger poÃ¤ng utifrÃ¥n token- och diakritmÃ¶nster. AnvÃ¤nds som fallback och tiebreaker.

---

## ðŸ”¹ faq-data.js
**Imports:**
- `Fuse` from `fuse.js`
- `getFaqCache` from `./faq-cache.js`
- `logMessage` from `./logger.js`

**Exports:**
- `initFaqData(caller)` â€“ laddar FAQ och bygger Fuseâ€‘index
- `getFaqIndex(lang)` â€“ returnerar index per sprÃ¥k

**Variables:**
- `faqIndexMap` (cache fÃ¶r Fuse-instanser)
- `faqDataLoaded` (flag)

**Purpose:**
FÃ¶rbereder Fuse.js-index fÃ¶r FAQ-sÃ¶kning och sprÃ¥kledtrÃ¥dar.

---

## ðŸ”¹ faq-cache.js
**Imports:**
- `logMessage` from `./logger.js`

**Exports:**
- `getFaqCache(key)`
- `setFaqCache(key, value)`

**Internal vars:**
- `faqCache` (in-memory Map)

**Usage:**
Delas mellan FAQ, detect-lang-core och Sheets-hantering.

---

## ðŸ”¹ faq-sheets.js
**Imports:**
- `googleapis` (sheets API)
- `logMessage` from `./logger.js`
- `getFaqCache` / `setFaqCache`

**Exports:**
- `loadAllFAQSheets()` â€“ laddar FAQ-data per sprÃ¥k.
- `queueBenchmarkResult()` â€“ kÃ¶hantering av benchmarkrader.
- `flushPendingWrites()` â€“ tÃ¶mmer skrivkÃ¶.
- `clearSheet(sheetId, tabName)`

**Env vars:**
- `SHEET_ID_MAIN`, `SHEET_TAB_NAME`, `TEST_MODE`

**Purpose:**
Google Sheets I/O fÃ¶r FAQ och benchmark.

---

## ðŸ”¹ openai-client.js
**Imports:**
- `OpenAI` from `openai`

**Exports:**
- `getOpenAIClient(caller)` â€“ central klient med env-nyckel.

**Internal vars:**
- `singletonClient`

**Purpose:**
Delad OpenAI-klient med kontextloggning.

---

## ðŸ”¹ logger.js
**Exports:**
- `logMessage(file, message)`

**Purpose:**
Enkel wrapper som skriver till `logs/{file}` samt konsolen i dev.

---

## ðŸ”¹ block-long.js
**Exports:**
- `detectLongOrRepetitive(text)`

**Purpose:**
Analyserar textlÃ¤ngd och repetitivitet innan AI.

---

## ðŸ”¹ gate.js
**Imports:**
- `filters.js`
- `block-long.js`
- `logMessage`

**Exports:**
- `runGate(input)`

**Purpose:**
KÃ¶r pre-filters, whitelist/blacklist och LONG-block innan AI.

---

## ðŸ”¹ filters.js
**Exports:**
- `runFilters(input)`

**Purpose:**
Matchar mot BL/WL/keywords enligt /config.

---

## ðŸ”¹ utils-progress.js
**Exports:**
- `createProgressBar(total)`

**Purpose:**
CLI progressbar fÃ¶r tester.

---

## ðŸ”¹ tests/faq-lang-benchmark-v4.mjs
**Imports:**
- `detectLangCore` from `../lib/detect-lang-core.js`
- `loadAllFAQSheets`, `queueBenchmarkResult`, `flushPendingWrites`, `clearSheet`
- `chalk`, `readline`, `fs`, `path`
- `createProgressBar`

**Purpose:**
Benchmarking-script som testar alla sprÃ¥k mot FAQ och loggar resultat i CSV + Sheets.

---

## ðŸ”¹ paths (kort Ã¶versikt)
```
/lib
  detect-lang-core.js
  detect-lang-rules.js
  detect-lang-heuristics.js
  faq-data.js
  faq-cache.js
  faq-sheets.js
  openai-client.js
  logger.js
  block-long.js
  gate.js
  filters.js
  utils-progress.js
/tests
  faq-lang-benchmark-v4.mjs
  logs/
```
graph TD
  subgraph LangDetection
    A[detect-lang-core.js]
    B[detect-lang-rules.js]
    C[detect-lang-heuristics.js]
    D[faq-fuzzy-detect.js]
  end

  subgraph FAQ System
    E[faq-data.js]
    F[faq-cache.js]
    G[faq-sheets.js]
  end

  subgraph Infrastructure
    H[openai-client.js]
    I[logger.js]
    J[utils-progress.js]
  end

  subgraph Guards
    K[block-long.js]
    L[gate.js]
    M[filters.js]
  end

  A --> B
  A --> C
  A --> D
  A --> E
  A --> F
  A --> H
  A --> I

  E --> F
  E --> I
  G --> F
  G --> I

  L --> M
  L --> K
  L --> I
